// Code generated by go-swagger; DO NOT EDIT.

package build_certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new build certificate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build certificate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BuildCertificateConfirm confirms a build certificate

Confirm the upload of a specific build certificate of a specific app
*/
func (a *Client) BuildCertificateConfirm(params *BuildCertificateConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*BuildCertificateConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildCertificateConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "build-certificate-confirm",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildCertificateConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BuildCertificateConfirmOK), nil

}

/*
BuildCertificateCreate creates a build certificate

Add a new build certificate to a specific app
*/
func (a *Client) BuildCertificateCreate(params *BuildCertificateCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BuildCertificateCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildCertificateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "build-certificate-create",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/build-certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildCertificateCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BuildCertificateCreateCreated), nil

}

/*
BuildCertificateDelete deletes a build certificate

Remove a specific build certificate from a specific app
*/
func (a *Client) BuildCertificateDelete(params *BuildCertificateDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*BuildCertificateDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildCertificateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "build-certificate-delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app-slug}/build-certificates/{build-certificate-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildCertificateDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BuildCertificateDeleteOK), nil

}

/*
BuildCertificateList gets list of the build certificates

List all the build certificates for a specific app
*/
func (a *Client) BuildCertificateList(params *BuildCertificateListParams, authInfo runtime.ClientAuthInfoWriter) (*BuildCertificateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildCertificateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "build-certificate-list",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/build-certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildCertificateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BuildCertificateListOK), nil

}

/*
BuildCertificateShow gets a specific build certificate

Show details of a specific build certificate of a specific app
*/
func (a *Client) BuildCertificateShow(params *BuildCertificateShowParams, authInfo runtime.ClientAuthInfoWriter) (*BuildCertificateShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildCertificateShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "build-certificate-show",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/build-certificates/{build-certificate-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildCertificateShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BuildCertificateShowOK), nil

}

/*
BuildCertificateUpdate updates a build certificate

Update a specific build certificate of a specific app
*/
func (a *Client) BuildCertificateUpdate(params *BuildCertificateUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*BuildCertificateUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildCertificateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "build-certificate-update",
		Method:             "PATCH",
		PathPattern:        "/apps/{app-slug}/build-certificates/{build-certificate-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildCertificateUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BuildCertificateUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
