// Code generated by go-swagger; DO NOT EDIT.

package provisioning_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new provisioning profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provisioning profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProvisioningProfileConfirm confirms a provisioning profile

Confirm the upload of a specific provisioning profile of a specific app
*/
func (a *Client) ProvisioningProfileConfirm(params *ProvisioningProfileConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisioningProfileConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisioningProfileConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisioning-profile-confirm",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisioningProfileConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisioningProfileConfirmOK), nil

}

/*
ProvisioningProfileCreate creates a provisioning profile

Add a new provisioning profile to a specific app
*/
func (a *Client) ProvisioningProfileCreate(params *ProvisioningProfileCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisioningProfileCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisioningProfileCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisioning-profile-create",
		Method:             "POST",
		PathPattern:        "/apps/{app-slug}/provisioning-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisioningProfileCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisioningProfileCreateCreated), nil

}

/*
ProvisioningProfileDelete deletes a provisioning profile

Remove a specific provisioning profile from a specific app
*/
func (a *Client) ProvisioningProfileDelete(params *ProvisioningProfileDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisioningProfileDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisioningProfileDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisioning-profile-delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisioningProfileDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisioningProfileDeleteOK), nil

}

/*
ProvisioningProfileList gets list of the provisioning profiles

List all the provisioning profiles for a specific app
*/
func (a *Client) ProvisioningProfileList(params *ProvisioningProfileListParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisioningProfileListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisioningProfileListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisioning-profile-list",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/provisioning-profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisioningProfileListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisioningProfileListOK), nil

}

/*
ProvisioningProfileShow gets a specific provisioning profile

Show details of a specific provisioning profile of a specific app
*/
func (a *Client) ProvisioningProfileShow(params *ProvisioningProfileShowParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisioningProfileShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisioningProfileShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisioning-profile-show",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisioningProfileShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisioningProfileShowOK), nil

}

/*
ProvisioningProfileUpdate updates a provisioning profile

Update a specific provisioning profile of a specific app
*/
func (a *Client) ProvisioningProfileUpdate(params *ProvisioningProfileUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisioningProfileUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisioningProfileUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisioning-profile-update",
		Method:             "PATCH",
		PathPattern:        "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisioningProfileUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisioningProfileUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
