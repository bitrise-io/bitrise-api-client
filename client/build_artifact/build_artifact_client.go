// Code generated by go-swagger; DO NOT EDIT.

package build_artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new build artifact API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build artifact API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArtifactDelete deletes a build artifact

Remove a specific build artifact of a specific build in a specific app
*/
func (a *Client) ArtifactDelete(params *ArtifactDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ArtifactDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtifactDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "artifact-delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtifactDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArtifactDeleteOK), nil

}

/*
ArtifactList gets list of the build artifacts

List all the available build artifacts for a specific build in a specific app
*/
func (a *Client) ArtifactList(params *ArtifactListParams, authInfo runtime.ClientAuthInfoWriter) (*ArtifactListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtifactListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "artifact-list",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/builds/{build-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtifactListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArtifactListOK), nil

}

/*
ArtifactShow gets a specific build artifact

Show details of a specific build artifact
*/
func (a *Client) ArtifactShow(params *ArtifactShowParams, authInfo runtime.ClientAuthInfoWriter) (*ArtifactShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtifactShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "artifact-show",
		Method:             "GET",
		PathPattern:        "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtifactShowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArtifactShowOK), nil

}

/*
ArtifactUpdate updates a build artifact

Update a specific build artifact of a specific build in a specific app
*/
func (a *Client) ArtifactUpdate(params *ArtifactUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ArtifactUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArtifactUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "artifact-update",
		Method:             "PATCH",
		PathPattern:        "/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArtifactUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ArtifactUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
